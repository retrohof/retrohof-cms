@page
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Mvc.Localization
@using Retrohof.Features
@using Volo.Abp.AspNetCore.Mvc.UI.Localization
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic.Providers
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic.Themes.Basic.Components.AboutUs
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic.Themes.Basic.Components.ChooseUs
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic.Themes.Basic.Components.Introduction
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic.Themes.Basic.Components.Maintenance
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic.Themes.Basic.Components.Newsletter
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic.Themes.Basic.Components.OpeningHours
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic.Themes.Basic.Components.RecentPosts
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic.Themes.Basic.Components.Testimonials
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic.Themes.Basic.Components.FeaturedWorks
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic.Themes.Basic.Components.ClientReviews
@using Volo.Abp.MultiTenancy
@using Volo.Abp.Ui.Branding
@using Volo.Abp.Users

@inject ICanvasThemeBrandingProvider Branding
@inject ICurrentTenant CurrentTenant
@inject ICurrentUser CurrentUser
@inject IThemeLayoutManager ThemeLayoutManager
@inject IHttpContextAccessor httpContext;
@inject IHomePageComponentsProvider PageComponentsProvider;
@inject IViewComponentsFeatureProvider<ViewComponent> Features;

@model Retrohof.Web.Pages.IndexModel

@{
	Layout = ThemeLayoutManager.GetThemeLayout(PageType.Application);
	var isLive = @httpContext?.HttpContext?.Request.QueryString.HasValue;
}

@section styles {
	<abp-style src="/Pages/Index.css" />
}

@section scripts {
	<abp-script src="/Pages/Index.js" />
}

<section id="content">

	<div class="content-wrap">

		@if (isLive.Value)
		{
			@Html.Raw(Model.DisplayTenant(CurrentTenant))

			@Html.Raw(@Model.DisplayUser(CurrentUser))
		}

		<!-- Remove ! for maintenance page -->
		@if (await Features.DisplayViewComponent<MaintenanceViewComponent>())
		{
			@(await Component.InvokeAsync<MaintenanceViewComponent>())
		}
		else
		{
			<!-- Introduction
			============================================= -->
			@if (await Features.DisplayViewComponent<IntroductionViewComponent>())
				@(await Component.InvokeAsync<IntroductionViewComponent>())



			<!-- About Us
			============================================= -->
			@if (await Features.DisplayViewComponent<AboutUsViewComponent>())
				@(await Component.InvokeAsync<AboutUsViewComponent>())



			<!-- ChooseUs
			============================================= -->
			@if (await Features.DisplayViewComponent<ChooseUsViewComponent>())
				@(await Component.InvokeAsync<ChooseUsViewComponent>())



			<!-- FeaturedWorks
			============================================= -->
			@if (await Features.DisplayViewComponent<FeaturedWorksViewComponent>())
				@(await Component.InvokeAsync<FeaturedWorksViewComponent>())




			<!-- ClientReviews
			============================================= -->
			@if (await Features.DisplayViewComponent<ClientReviewsViewComponent>())
				@(await Component.InvokeAsync<ClientReviewsViewComponent>())



@* 			<div class="container">

				<div class="row g-5 col-mb-50">
					<div class="col-lg-8">

						<!-- Recent Posts
						============================================= -->
						@(await Component.InvokeAsync<RecentPostsViewComponent>()) <!-- #recent posts end -->

					</div>

					<div class="col-lg-4">

						<!-- Opening Hours
						============================================= -->
						@(await Component.InvokeAsync<OpeningHoursViewComponent>()) <!-- #opening hours end -->
						<!-- Testimonials
						============================================= -->
						@(await Component.InvokeAsync<TestimonialsViewComponent>()) <!-- #testimonials end -->

					</div>
				</div>

			</div> *@


			<!-- NewsLetter
			============================================= -->
            @if (await Features.DisplayViewComponent<NewsLetterViewComponent>())
                @(await Component.InvokeAsync<NewsLetterViewComponent>())


		}

	</div>

</section>
